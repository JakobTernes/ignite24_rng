/* Generated by Yosys 0.43+22 (git sha1 118b2829d, g++ 12.2.0-14 -fPIC -Os) */

(* src = "notModule.v:1.1-8.10" *)
module notGate(a, inversedA);
  (* src = "notModule.v:3.7-3.8" *)
  input a;
  wire a;
  (* src = "notModule.v:4.8-4.17" *)
  output inversedA;
  wire inversedA;
  assign inversedA = ~a;
endmodule

(* src = "randModule.v:1.1-13.10" *)
module randModule(en, randOut);
  (* src = "randModule.v:2.11-2.13" *)
  input en;
  wire en;
  (* src = "randModule.v:3.12-3.19" *)
  output randOut;
  wire randOut;
  (* src = "randModule.v:5.10-5.12" *)
  wire w0;
  (* src = "randModule.v:6.10-6.12" *)
  wire w1;
  (* src = "randModule.v:7.10-7.12" *)
  wire w2;
  assign w0 = ~(en & w2);
  (* module_not_derived = 32'd1 *)
  (* src = "randModule.v:10.13-10.30" *)
  notGate notGate_1 (
    .a(w0),
    .inversedA(w1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "randModule.v:11.13-11.30" *)
  notGate notGate_2 (
    .a(w1),
    .inversedA(w2)
  );
  assign randOut = w2;
endmodule

(* top =  1  *)
(* src = "ro_top.v:1.1-44.10" *)
module ro_top(clk, en, d_out);
  (* src = "ro_top.v:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "ro_top.v:3.17-3.22" *)
  output [7:0] d_out;
  wire [7:0] d_out;
  (* src = "ro_top.v:5.14-5.28" *)
  reg [7:0] d_out_internal;
  (* src = "ro_top.v:2.16-2.18" *)
  input en;
  wire en;
  (* src = "ro_top.v:6.16-6.22" *)
  wire [15:0] ro_out;
  (* src = "ro_top.v:7.15-7.22" *)
  wire [7:0] xor_out;
  assign xor_out[0] = ro_out[1] ^ ro_out[0];
  assign xor_out[1] = ro_out[3] ^ ro_out[2];
  assign xor_out[2] = ro_out[5] ^ ro_out[4];
  assign xor_out[3] = ro_out[7] ^ ro_out[6];
  assign xor_out[4] = ro_out[9] ^ ro_out[8];
  assign xor_out[5] = ro_out[11] ^ ro_out[10];
  assign xor_out[6] = ro_out[13] ^ ro_out[12];
  assign xor_out[7] = ro_out[15] ^ ro_out[14];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[1] <= xor_out[1];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[2] <= xor_out[2];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[3] <= xor_out[3];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[4] <= xor_out[4];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[5] <= xor_out[5];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[6] <= xor_out[6];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[7] <= xor_out[7];
  (* src = "ro_top.v:38.5-40.8" *)
  always @(posedge clk)
    d_out_internal[0] <= xor_out[0];
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:10.16-10.49" *)
  randModule rm0 (
    .en(en),
    .randOut(ro_out[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:11.16-11.49" *)
  randModule rm1 (
    .en(en),
    .randOut(ro_out[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:21.16-21.51" *)
  randModule rm10 (
    .en(en),
    .randOut(ro_out[10])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:22.16-22.51" *)
  randModule rm11 (
    .en(en),
    .randOut(ro_out[11])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:23.16-23.51" *)
  randModule rm12 (
    .en(en),
    .randOut(ro_out[12])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:24.16-24.51" *)
  randModule rm13 (
    .en(en),
    .randOut(ro_out[13])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:25.16-25.51" *)
  randModule rm14 (
    .en(en),
    .randOut(ro_out[14])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:26.16-26.51" *)
  randModule rm15 (
    .en(en),
    .randOut(ro_out[15])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:12.16-12.49" *)
  randModule rm2 (
    .en(en),
    .randOut(ro_out[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:13.16-13.49" *)
  randModule rm3 (
    .en(en),
    .randOut(ro_out[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:14.16-14.49" *)
  randModule rm4 (
    .en(en),
    .randOut(ro_out[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:15.16-15.49" *)
  randModule rm5 (
    .en(en),
    .randOut(ro_out[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:16.16-16.49" *)
  randModule rm6 (
    .en(en),
    .randOut(ro_out[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:17.16-17.49" *)
  randModule rm7 (
    .en(en),
    .randOut(ro_out[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:19.16-19.49" *)
  randModule rm8 (
    .en(en),
    .randOut(ro_out[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "ro_top.v:20.16-20.49" *)
  randModule rm9 (
    .en(en),
    .randOut(ro_out[9])
  );
  assign d_out = d_out_internal;
endmodule
